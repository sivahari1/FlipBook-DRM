generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                       String        @id @default(cuid())
  email                    String        @unique
  passwordHash             String
  role                     Role          @default(SUBSCRIBER)
  emailVerified            Boolean       @default(false)
  emailVerificationToken   String?       @unique
  emailVerificationExpires DateTime?
  stripeCustomerId         String?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  documents                Document[]
  shares                   ShareLink[]
  subscription             Subscription?
  orders                   Order[]
  viewAudits               ViewAudit[]

  @@map("users")
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  status           String
  currentPeriodEnd DateTime
  plan             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Order {
  id               String      @id @default(cuid())
  userId           String
  planId           String
  amount           Float
  currency         String      @default("INR")
  status           OrderStatus @default(PENDING)
  razorpayOrderId  String?     @unique
  razorpayPaymentId String?    @unique
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Document {
  id             String      @id @default(cuid())
  ownerId        String
  title          String
  description    String?
  pageCount      Int         @default(0)
  hasPassphrase  Boolean     @default(false)
  passphraseHash String?
  storageKey     String
  tilePrefix     String?
  drmOptions     String      @default("{}")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  owner          User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  shareLinks     ShareLink[]
  viewAudits     ViewAudit[]

  @@map("documents")
}

model ShareLink {
  id             String      @id @default(cuid())
  documentId     String
  creatorId      String
  code           String      @unique
  expiresAt      DateTime?
  maxOpens       Int?
  openCount      Int         @default(0)
  ipLock         String?
  uaLock         String?
  requireOtp     Boolean     @default(false)
  lastOtpHash    String?
  requirePass    Boolean     @default(false)
  passphraseHint String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  creator        User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  document       Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  viewAudits     ViewAudit[]

  @@map("share_links")
}

model ViewAudit {
  id          String     @id @default(cuid())
  userId      String?
  shareLinkId String?
  documentId  String
  ipHash      String
  uaHash      String
  sessionId   String
  event       String
  meta        String?
  createdAt   DateTime   @default(now())
  document    Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)
  shareLink   ShareLink? @relation(fields: [shareLinkId], references: [id])
  user        User?      @relation(fields: [userId], references: [id])

  @@map("view_audits")
}

enum Role {
  ADMIN
  CREATOR
  SUBSCRIBER
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
